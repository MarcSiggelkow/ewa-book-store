//Express is for building the Rest apis
const express = require('express');
//body-parser helps to parse the request and create the req.body object
const bodyParser = require('body-parser');
//cors provides Express middleware to enable CORS with various options.
const cors = require("cors");
// fs module to write to your filesystem
const fs = require('fs');
// path module to make defining filepaths easier
const path = require('path');
//  initialize the Express app and save references to your JSON files as PRODUCT_DATA_FILE and CART_DATA_FILE
const app = express();
const PRODUCT_DATA_FILE = path.join(__dirname, 'server-product-data.json');
const CART_DATA_FILE = path.join(__dirname, 'server-cart-data.json');

// Create Express server, set port, create middleware to set response headers
app.set('port', (process.env.PORT || 3000));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use((req, res, next) => {
    //The setHeader method sets the header of the HTTP responses
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
  next();
});

app.use((req, res, next) => {
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
  next();
});

// create an API endpoint that our frontend will query

/* API Endpoint "/cart"
 * receives the request object containing the cart items from the frontend and stores them 
 * in the server-cart-data.json file in the root of our project
 * Products here are JavaScript objects with 
 * 
 * id, 
 * title, 
 * description, 
 * price, 
 * image_tag, 
 * and quantity properties.
 * 
 * The code also checks if the cart already exists to ensure that requests for a repeated product only increase the quantity
 */
  app.post('/cart', (req, res) => {
    fs.readFile(CART_DATA_FILE, (err, data) => {
      const cartProducts = JSON.parse(data);
      const newCartProduct = { 
        id: req.body.id,
        title: req.body.title,
        description: req.body.description,
        price: req.body.price,
        image_tag: req.body.image_tag, 
        quantity: 1 
      };
      let cartProductExists = false;
      cartProducts.map((cartProduct) => {
        if (cartProduct.id === newCartProduct.id) {
          cartProduct.quantity++;
          cartProductExists = true;
        }
      });
      if (!cartProductExists) cartProducts.push(newCartProduct);
      fs.writeFile(CART_DATA_FILE, JSON.stringify(cartProducts, null, 4), () => {
        res.setHeader('Cache-Control', 'no-cache');
        res.json(cartProducts);
      });
    });
  });

  /* API Endpoint "/cart/delete"
   * This code receives the request object containing the item to be removed from the cart and checks the server-cart-data.json file for this item via its id
   * If it exists and the quantity is greater than one, then the quantity of the item in the cart is deducted. Otherwise, if the item’s quantity is less than 1, 
   * it will be removed from the cart and the remaining items will be stored in the server-cart-data.json file.
  */
  app.delete('/cart/delete', (req, res) => {
    fs.readFile(CART_DATA_FILE, (err, data) => {
      let cartProducts = JSON.parse(data);
      cartProducts.map((cartProduct) => {
        if (cartProduct.id === req.body.id && cartProduct.quantity > 1) {
          cartProduct.quantity--;
        } else if (cartProduct.id === req.body.id && cartProduct.quantity === 1) {
          const cartIndexToRemove = cartProducts.findIndex(cartProduct => cartProduct.id === req.body.id);
          cartProducts.splice(cartIndexToRemove, 1);
        }
      });
      fs.writeFile(CART_DATA_FILE, JSON.stringify(cartProducts, null, 4), () => {
        res.setHeader('Cache-Control', 'no-cache');
        res.json(cartProducts);
      });
    });
  });

  /* API Endpoint "/cart/delete/all"
   * This code is responsible for removing all the items from the cart by returning an empty array.
  */
  app.delete('/cart/delete/all', (req, res) => {
    fs.readFile(CART_DATA_FILE, () => {
      let emptyCart = [];
      fs.writeFile(CART_DATA_FILE, JSON.stringify(emptyCart, null, 4), () => {
        res.json(emptyCart);
      });
    });
  });

  app.get('/products', (req, res) => {
    fs.readFile(PRODUCT_DATA_FILE, (err, data) => {
      res.setHeader('Cache-Control', 'no-cache');
      res.json(JSON.parse(data));
    });
  });

app.listen(app.get('port'), () => {
  console.log(`Find the server at: http://localhost:${app.get('port')}/`);
});

app.listen(app.get('port'), () => {
  console.log(`Find the server at: http://localhost:${app.get('port')}/`);
});












          <li><router-link to="/">Home</router-link></li>
          <li><router-link to="/shop">Shop</router-link></li>
          <li><router-link to="/faq">FAQ</router-link></li>
        </ul>
      </nav>

      <img alt="Logo" src="../assets/Logo-main.png">

      <nav>
        <ul>
          <li><router-link to="/blog">Blog</router-link></li>
          <li><router-link to="/about">Über uns</router-link></li>
          <li><router-link to="/contact">Kontakt</router-link></li>









          <!-- eslint-disable vue/no-deprecated-slot-scope-attribute -->
<template>
  <v-container>
    <h2 class="display-2 mb-4">Hot products showing</h2>

    <v-layout row wrap>
      <template v-for="item in products" :key="item.ProduktID">
        <v-flex xs2 pa-1>
          <v-hover>
            <v-card slot-scope="{hover}" class="mx-auto" color="gray lighten-4" max-width="600" height="350">
              <v-img :src="item.LinkGrafikdatei" :aspect-ratio="16/9">
                <v-expand-transition>
                  <div v-if="hover" class="d-flex transition-fast-in-fast-out orange draken-2 display-3 v-card--reveal display3 black--text" style="height: 100%;">
                    {{(item.PreisNetto) * (1 + (item.Mwstsatz/100)).toFixed(2)}} €
                  </div>
                </v-expand-transition>
              </v-img>

              <v-card-text class="pt-4" style="position: relative;">
                <v-btn absolute color="orange" class="white--text" fab medium right top>
                  <v-icon>shopping_cart</v-icon>
                </v-btn>

                <div class="font-weight-light grey--text title mb-2">{{item.Genre}}</div>
                <h3 class="display-1 font-weight-light orange--text mb-2">{{item.Produkttitel.substring(0,10)}}</h3>

                <div class="font-weight-light mb-2">{{item.Kurzinhalt.substring(0,25)}}</div>
              </v-card-text>
            </v-card>
          </v-hover>
        </v-flex>
      </template>
    </v-layout>
  </v-container>
</template>

<script>
// import axios
import axios from 'axios'
export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: 'ProductList',
  data () {
    return {
      products: []
    }
  },
  methods: {
    // Get All Products
    async getProducts () {
      try {
        const response = await axios.get('http://localhost:5000/products')
        this.items = response.data
      } catch (err) {
        console.log(err)
      }
    }
  },
  mounted () {
    this.getProducts()
  }
}
</script>

<style scoped>
.v-card--reveal {
  align-items: center;
  bottom: 0;
  justify-content: center;
  opacity: 0.5;
  position: absolute;
  width: 100%;
}
.v-card h3.display-1 {
  font-size: 24px !important;
}
</style>
